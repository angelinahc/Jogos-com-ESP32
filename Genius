from machine import Pin, PWM
import time
import random

# ------------------- CONFIGURAÇÃO DE PINOS -------------------

BUZZER_PIN = 4
buzzer = PWM(Pin(BUZZER_PIN))
buzzer.freq(500)             # Frequência inicial (em Hz)
buzzer.duty(0)

LEDS = {
    1: Pin(5, Pin.OUT, value=0), # Vermelho
    2: Pin(18, Pin.OUT, value=0), # Verde
    3: Pin(19, Pin.OUT, value=0), # Amarelo
    4: Pin(21, Pin.OUT, value=0), # Azul
}

BOTOES = {
    1: Pin(26, Pin.IN, Pin.PULL_UP), # Vermelho
    2: Pin(25, Pin.IN, Pin.PULL_UP), # Verde
    3: Pin(33, Pin.IN, Pin.PULL_UP), # Amarelo
    4: Pin(32, Pin.IN, Pin.PULL_UP), # Azul
     
}

# ------------------- FUNÇÕES AUXILIARES -------------------

def controlar_led(cor, estado):
    if cor in LEDS:
        LEDS[cor].value(estado)

def apagar_todos_leds():
    """Desliga todos os LEDs de uma vez."""
    for cor in LEDS:
        controlar_led(cor, 0)
        
def tocar_som(frequencia, duracao):
    """Emite um som no buzzer com uma frequência e duração específicas."""
    buzzer.duty(512)
    buzzer.freq(frequencia)
    time.sleep_ms(duracao)
    buzzer.duty(0)
    time.sleep_ms(20)

def mostrar_sequencia(sequencia):
    tons = {
        1: 262,
        2: 330,
        3: 392,
        4: 523,
    }
    
    time.sleep(0.5)
    for cor in sequencia:
        controlar_led(cor, 1)
        tocar_som(tons[cor], 400) # Toca o som da cor correspondente
        apagar_todos_leds()
        time.sleep_ms(200) # Pausa entre os LEDs

def animacao_game_over():
    """Animação de erro quando o jogador perde."""
    for i in range(3):
        tocar_som(150, 100) # Toca um som grave para indicar erro
        for cor in LEDS:
            controlar_led(cor, 1)
        time.sleep_ms(100)
        apagar_todos_leds()
        time.sleep_ms(100)
    tocar_som(150, 200)

# ------------------- FUNÇÃO DE LEITURA ROBUSTA -------------------

def esperar_apertar_botao():
    # Mapeamento de cor para frequência
    tons = {
        1: 262,
        2: 330,
        3: 392,
        4: 523,
    }

    while True:
        for cor, botao_pin in BOTOES.items():
            if botao_pin.value() == 0:
                controlar_led(cor, 1)
                tocar_som(tons[cor], 100)
                
                # Loop para esperar o botão ser SOLTO, com timeout de 2 segundos
                tempo_inicial = time.ticks_ms()
                while botao_pin.value() == 0:
                    if time.ticks_diff(time.ticks_ms(), tempo_inicial) > 2000:
                        print(f"ERRO: Timeout! O botão {cor} parece estar preso.")
                        apagar_todos_leds()
                        return None
                    time.sleep_ms(10)
                
                apagar_todos_leds()
                time.sleep_ms(50)
                return cor
        time.sleep_ms(10)

# ------------------- LÓGICA PRINCIPAL DO JOGO -------------------

def iniciar_jogo():
    """Função principal que roda o jogo."""
    random.seed()
    
    print("Jogo Genius Iniciado. Pressione qualquer botão para começar.")
    apagar_todos_leds()
    esperar_apertar_botao()

    sequencia = []
    
    while True:
        sequencia.append(random.choice(list(LEDS.keys())))
        print(f"Memorize a sequência: {sequencia}")
        mostrar_sequencia(sequencia)

        print("Sua vez!")
        jogador_perdeu = False
        for cor_correta in sequencia:
            cor_jogador = esperar_apertar_botao()

            if cor_jogador is None or cor_jogador != cor_correta:
                jogador_perdeu = True
                break
        
        if jogador_perdeu:
            print(f"Fim de jogo! Sua pontuação: {len(sequencia) - 1}")
            animacao_game_over()
            
            print("\n\nPressione qualquer botão para jogar novamente.")
            esperar_apertar_botao()
            sequencia = []
        else:
            print("Correto! Próxima rodada...")
            tocar_som(600, 200)
            time.sleep(0.5)

# --- Inicia o programa ---
iniciar_jogo()
